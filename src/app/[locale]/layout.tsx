import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";
// Support For i18n
import {NextIntlClientProvider} from 'next-intl';
import {getMessages} from 'next-intl/server';
import {getTranslations} from 'next-intl/server';
// For static local rendering
import {routing} from '@/i18n/routing';
import {unstable_setRequestLocale} from 'next-intl/server';

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export async function generateMetadata({params: {locale}}: {params: {locale: string}}) {
  const t = await getTranslations({locale, namespace: 'Metadata'});
 
  return {
    title: t('title'),
    description: "Generated by create next app",
  };
}

export default async function RootLayout({ 
  children, params: {locale} 
}: Readonly<{ children: React.ReactNode; params: {locale: string};}>) {

  // Providing all local messages to the client
  const messages = await getMessages();
  // For static `local ed` page rendering
  unstable_setRequestLocale(locale);

  return (
    <html lang={locale} suppressHydrationWarning>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
      <NextIntlClientProvider messages={messages}>
        <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange>
            {children}
        </ThemeProvider>
      </NextIntlClientProvider>
      </body>
    </html>
  );
}

// For static local page rendering
export function generateStaticParams() {
  return routing.locales.map((locale) => ({locale}));
}